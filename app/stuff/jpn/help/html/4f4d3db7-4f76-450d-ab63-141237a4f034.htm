<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>カーソルの種類について</title><meta name="Language" content="ja-jp" /><meta name="System.Keywords" content="カーソルの種類" /><meta name="Microsoft.Help.Id" content="4f4d3db7-4f76-450d-ab63-141237a4f034" /><meta name="Description" content="リレーショナル データベースで操作を実行する場合、行の完全なセットが操作の対象になります。SELECT ステートメントでは、WHERE 句で指定した条件を満たすすべての行のセットが返されます。このステートメントが返す行の完全なセットを結果セットと呼びます。アプリケーションでは、必ずしも、結果セット全体をひとまとめに使用して作業することが効率的であるとは限りません。そのため、このようなアプリケーションでは、一度に 1 行または少数の行のブロックを使用するためのメカニズムが必要になります。カーソルはそのメカニズ" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">カーソルの種類について</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>リレーショナル データベースで操作を実行する場合、行の完全なセットが操作の対象になります。SELECT ステートメントでは、WHERE 句で指定した条件を満たすすべての行のセットが返されます。このステートメントが返す行の完全なセットを結果セットと呼びます。アプリケーションでは、必ずしも、結果セット全体をひとまとめに使用して作業することが効率的であるとは限りません。そのため、このようなアプリケーションでは、一度に 1 行または少数の行のブロックを使用するためのメカニズムが必要になります。カーソルはそのメカニズムを提供する、結果セットの拡張機能です。</p><p>カーソルでは、次のように結果セットの処理が拡張されます。</p><ul><li><p>結果セット内の特定の行を指定することができます。</p></li><li><p>結果セット内の現在位置から 1 行または 1 ブロックの行を取得できます。</p></li><li><p>結果セット内の現在位置の行データを修正できます。</p></li><li><p>結果セット内のデータベース データに対して他のユーザーが行った変更をさまざまなレベルで表示できます。</p></li></ul><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>SQL Server カーソルの種類の詳細については、SQL Server オンライン ブックの「カーソルの種類 (データベース エンジン)」を参照してください。</p></div><p>JDBC の仕様では、他のジョブによって行われた変更を認識する、または認識しない順方向専用およびスクロール可能なカーソルや、読み取り専用または更新可能なカーソルがサポートされています。この機能は、Microsoft JDBC Driver for SQL Server の <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> クラスによって提供されます。</p></div><h1 class="heading">解説</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>JDBC ドライバーでは、次の種類のカーソルがサポートされています。</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>結果セット</p><p>(カーソル) の種類</p></th><th><p>SQL Server のカーソルの種類</p></th><th><p>特性</p></th><th><p>select</p><p>Method</p></th><th><p>response</p><p>Buffering</p></th><th><p>説明</p></th></tr><tr><td><p>TYPE_FORWARD_ONLY (CONCUR_READ_ONLY)</p></td><td><p>なし</p></td><td><p>順方向専用、読み取り専用</p></td><td><p>direct</p></td><td><p>full</p></td><td><p>アプリケーションで結果セットに対して 1 回の (順方向の) パススルーを行う必要があります。これは既定の動作です。TYPE_SS_DIRECT_FORWARD_ONLY カーソルと同じように動作します。ステートメントの実行時には、サーバーからメモリに結果セット全体が読み込まれます。</p></td></tr><tr><td><p>TYPE_FORWARD_ONLY (CONCUR_READ_ONLY)</p></td><td><p>なし</p></td><td><p>順方向専用、読み取り専用</p></td><td><p>direct</p></td><td><p>adaptive</p></td><td><p>アプリケーションで結果セットに対して 1 回の (順方向の) パススルーを行う必要があります。TYPE_SS_DIRECT_FORWARD_ONLY カーソルと同じように動作します。アプリケーションの要求に応じてサーバーから行が読み取られるため、クライアント側のメモリの使用が最小限に抑えられます。</p></td></tr><tr><td><p>TYPE_FORWARD_ONLY (CONCUR_READ_ONLY)</p></td><td><p>高速順方向</p></td><td><p>順方向専用、読み取り専用</p></td><td><p>cursor</p></td><td><p>なし</p></td><td><p>アプリケーションでサーバー カーソルを使用して結果セットに対する 1 回の (順方向の) パススルーを行う必要があります。TYPE_SS_SERVER_CURSOR_FORWARD_ONLY カーソルと同じように動作します。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr><tr><td><p>TYPE_FORWARD_ONLY (CONCUR_UPDATABLE)</p></td><td><p>動的 (順方向専用)</p></td><td><p>順方向専用、更新可能</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>アプリケーションで 1 行以上の行を更新するには、結果セットに対して 1 回の (順方向の) パススルーを行う必要があります。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p><p>既定では、アプリケーションで <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> オブジェクトの <a href="233bf4f8-4758-42d0-a80b-33e34fa78027.htm">setFetchSize</a> メソッドが呼び出されるとフェッチ サイズが固定されます。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>JDBC ドライバーには、ステートメントの実行結果を SQL Server から (一度に取得するのではなく) 必要に応じて取得できるアダプティブ バッファリングの機能が備わっています。たとえば、アプリケーションからメモリに収まりきらないほどの大きなデータを取得する必要があっても、アダプティブ バッファリングが作用することで、クライアント アプリケーションがそのような値をストリームとして取得できるようになります。</p><p>ドライバーの既定の動作は "<span sdata="langKeyword" value="adaptive"><span class="keyword">adaptive</span></span> です。ただし、順方向専用の更新可能な結果セットに対するアダプティブ バッファリングを使用するには、アプリケーションは、<a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> オブジェクトの <a href="9f489835-6cda-4c8c-b139-079639a169cf.htm">setResponseBuffering</a> メソッドに、<span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 値 "<span sdata="langKeyword" value="adaptive&quot;"><span class="keyword">adaptive"</span></span> を指定して、このメソッドを明示的に呼び出す必要があります。コード例については、「<span sdata="link"><a href="76ecc05f-a77d-40a2-bab9-91a7fcf17347.htm">大きなデータを更新するサンプル</a></span>」を参照してください。</p></div></td></tr><tr><td><p>TYPE_SCROLL_INSENSITIVE</p></td><td><p>静的</p></td><td><p>スクロール可能、更新不可。</p><p>外部の行の更新、挿入、および削除は参照できません。</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>アプリケーションで、データベース スナップショットが必要になります。結果セットは更新できません。CONCUR_READ_ONLY のみがサポートされます。それ以外の同時実行タイプは、このカーソル タイプと組み合わせて使用すると例外が発生します。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr><tr><td><p>TYPE_SCROLL_SENSITIVE</p><p>(CONCUR_READ_ONLY)</p></td><td><p>キーセット</p></td><td><p>スクロール可能、読み取り専用。外部の行の更新を参照できます。削除はデータの欠落によって表されます。</p><p>外部の行の挿入は参照できません。</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>アプリケーションで、既存の行についてのみ、変更されたデータを調べる必要があります。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr><tr><td><p>TYPE_SCROLL_SENSITIVE</p><p>(CONCUR_UPDATABLE、CONCUR_SS_SCROLL_LOCKS、CONCUR_SS_OPTIMISTIC_CC、CONCUR_SS_OPTIMISTIC_CCVAL)</p></td><td><p>キーセット</p></td><td><p>スクロール可能、更新可能。</p><p>外部および内部の行の更新を参照できます。削除はデータの欠落によって表されます。挿入は参照できません。</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>アプリケーションから <b>ResultSet</b> オブジェクトを使用して既存の行のデータを変更できます。また、<b>ResultSet</b> オブジェクト以外から、他のアプリケーションによって行われた行に対する変更も参照できます。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr><tr><td><p>TYPE_SS_DIRECT_FORWARD_ONLY</p></td><td><p>なし</p></td><td><p>順方向専用、読み取り専用</p></td><td><p>なし</p></td><td><p>full または adaptive</p></td><td><p>整数値 2003 です。全体がバッファーされた、読み取り専用のクライアント側カーソルを使用できます。サーバー カーソルは作成されません。</p><p>同時実行の種類としては CONCUR_READ_ONLY のみがサポートされます。それ以外の同時実行タイプは、このカーソル タイプと組み合わせて使用すると例外が発生します。</p></td></tr><tr><td><p>TYPE_SS_SERVER_CURSOR_FORWARD_ONLY</p></td><td><p>高速順方向</p></td><td><p>順方向専用</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>整数値 2004 です。サーバー カーソルを使用して、すべてのデータに高速にアクセスできます。同時実行の種類が CONCUR_UPDATABLE である場合にのみ更新できます。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p><p>この場合にアダプティブ バッファリングを使用するには、アプリケーションで明示的に <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 値 "<span sdata="langKeyword" value="adaptive&quot;"><span class="keyword">adaptive"</span></span> を指定して <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> オブジェクトの <a href="9f489835-6cda-4c8c-b139-079639a169cf.htm">setResponseBuffering</a> メソッドを呼び出す必要があります。コード例については、「<span sdata="link"><a href="76ecc05f-a77d-40a2-bab9-91a7fcf17347.htm">大きなデータを更新するサンプル</a></span>」を参照してください。</p></td></tr><tr><td><p>TYPE_SS_SCROLL_STATIC</p></td><td><p>静的</p></td><td><p>他のユーザーによる更新は反映されません。</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>整数値 1004 です。アプリケーションで、データベース スナップショットが必要になります。これは JDBC TYPE_SCROLL_INSENSITIVE に対する SQL Server 固有のシノニムです。同時実行設定の動作は同じです。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr><tr><td><p>TYPE_SS_SCROLL_KEYSET</p><p>(CONCUR_READ_ONLY)</p></td><td><p>キーセット</p></td><td><p>スクロール可能、読み取り専用。外部の行の更新を参照できます。削除はデータの欠落によって表されます。</p><p>外部の行の挿入は参照できません。</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>整数値 1005 です。アプリケーションで、既存の行についてのみ、変更されたデータを調べる必要があります。これは JDBC TYPE_SCROLL_SENSITIVE に対する SQL Server 固有のシノニムです。同時実行設定の動作は同じです。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr><tr><td><p>TYPE_SS_SCROLL_KEYSET</p><p>(CONCUR_UPDATABLE、CONCUR_SS_SCROLL_LOCKS、CONCUR_SS_OPTIMISTIC_CC、CONCUR_SS_OPTIMISTIC_CCVAL)</p></td><td><p>キーセット</p></td><td><p>スクロール可能、更新可能。</p><p>外部および内部の行の更新を参照できます。削除はデータの欠落によって表されます。挿入は参照できません。</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>整数値 1005 です。アプリケーションは、既存の行について変更済みデータを参照したり、データを変更したりする必要があります。これは JDBC TYPE_SCROLL_SENSITIVE に対する SQL Server 固有のシノニムです。同時実行設定の動作は同じです。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr><tr><td><p>TYPE_SS_SCROLL_DYNAMIC</p><p>(CONCUR_READ_ONLY)</p></td><td><p>動的</p></td><td><p>スクロール可能、読み取り専用。</p><p>外部の行の更新と挿入を参照できます。削除は現在のフェッチ バッファー内の一時的なデータ欠落として表されます。</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>整数値 1006 です。アプリケーションで、既存の行について、変更されたデータを調べる必要があります。また、カーソルの有効期間内に挿入および削除された行を調べる必要があります。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr><tr><td><p>TYPE_SS_SCROLL_DYNAMIC</p><p>(CONCUR_UPDATABLE、CONCUR_SS_SCROLL_LOCKS、CONCUR_SS_OPTIMISTIC_CC、CONCUR_SS_OPTIMISTIC_CCVAL)</p></td><td><p>動的</p></td><td><p>スクロール可能、更新可能。</p><p>外部および内部の行の更新と挿入を参照できます。削除は現在のフェッチ バッファー内の一時的なデータ欠落として表されます。</p></td><td><p>なし</p></td><td><p>なし</p></td><td><p>整数値 1006 です。アプリケーションから <b>ResultSet</b> オブジェクトを使用して、既存の行のデータを変更したり、行の挿入または削除を行ったりすることができます。また、<b>ResultSet</b> オブジェクト以外から、他のアプリケーションによって行われた行に対する変更、挿入、および削除も参照できます。</p><p>行は、フェッチ サイズで指定されたブロック単位でサーバーから取得されます。</p></td></tr></table></div></div><h1 class="heading">カーソルの行の指定</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>TYPE_FORWARD_ONLY、TYPE_SS_DIRECT_FORWARD_ONLY、および TYPE_SS_SERVER_CURSOR_FORWARD_ONLY カーソルは、行を指定するメソッドとしては <a href="60248447-6908-4036-a779-a501453cd553.htm">next</a> メソッドだけをサポートしています。</p><p>TYPE_SS_SCROLL_DYNAMIC カーソルは、<a href="638e8148-8ca0-4e1f-9ec2-04a11bc9809b.htm">absolute</a> メソッドおよび <a href="a266e3bc-05c2-44e2-9346-125ae6780216.htm">getRow</a> メソッドをサポートしていません。<b>absolute</b> メソッドについては、動的カーソルに対して <a href="67ed9447-7b10-4c87-98e7-f4c2e2470b3a.htm">first</a> メソッドおよび <a href="2bcdbb69-95fd-4ae8-8488-1a75a91fe2e0.htm">relative</a> メソッドを組み合わせて呼び出すことで、同等の結果を得ることができます。</p><p><b>getRow</b> メソッドは、TYPE_FORWARD_ONLY、TYPE_SS_DIRECT_FORWARD_ONLY、TYPE_SS_SERVER_CURSOR_FORWARD_ONLY、TYPE_SS_SCROLL_KEYSET、および TYPE_SS_SCROLL_STATIC カーソルのみでサポートされています。<b>getRow</b> メソッドは、どの順方向専用カーソルについても、そのカーソルを使用してそれまでに読み取られた行数を返します。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>アプリケーションでサポートされていない、カーソルの行を指定する呼び出しを行った場合、または <b>getRow</b> メソッドに対してサポートされていない呼び出しを行った場合は、"要求された操作は、このカーソルの種類ではサポートされていません。" という意味のメッセージで例外がスローされます。</p></div><p>削除された行を参照できるのは、TYPE_SS_SCROLL_KEYSET および等価である TYPE_SCROLL_SENSITIVE カーソルの場合のみです。削除された行にカーソルが置かれている場合、列の値を得ることはできず、<a href="9c6db315-e614-4604-b020-41af6a214cc1.htm">rowDeleted</a> メソッドによって "true" が返されます。<b>get&lt;Type&gt;</b> メソッドを呼び出すと、"削除された行から値は取得できません" という意味のメッセージで例外がスローされます。削除された行を更新することはできません。削除された行に対して <b>update&lt;Type&gt;</b> メソッドの呼び出しを試みると、"削除された行を更新することはできません。" という意味のメッセージで例外がスローされます。TYPE_SS_SCROLL_DYNAMIC カーソルも、現在のフェッチ バッファーからカーソルが移動するまでは同じ動作です。</p><p>順方向カーソルと動的カーソルでは、フェッチ バッファー内でカーソルにアクセスできる間だけ、削除された行を同様の方法で参照することができます。順方向カーソルの場合は単純です。動的カーソルの場合は、フェッチ サイズが 1 より大きい場合に複雑になります。アプリケーションでは、フェッチ バッファーによって定義された範囲内でカーソルを前後に移動できますが、更新が行われた元のフェッチ バッファーが移動した場合には、削除された行が参照できなくなります。アプリケーションで、一時的に削除された行を動的カーソルを使用して参照しない場合は、FETCH RELATIVE (0) を使用する必要があります。</p><p>TYPE_SS_SCROLL_KEYSET または TYPE_SCROLL_SENSITIVE カーソル行のキー値がカーソルによって更新されると、更新された行がカーソルの選択基準を満たすかどうかにかかわらず、結果セット内でその行の元の位置が維持されます。行がカーソルの外部で更新されると、削除された行がその行の元の位置に現れます。ただし、行がカーソル内に現れるのは、新しいキー値を持ちカーソル内にもともと存在していた別の行が、その時点で削除されている場合だけです。</p><p>動的カーソルの場合は、更新された行は、フェッチ バッファーで定義された範囲が移動するまでは、フェッチ バッファー内での位置が維持されます。更新された行はその後結果セット内の異なる場所に再度現れるか、または完全に削除されます。結果セット内での一時的な不整合を回避する必要のあるアプリケーションでは、フェッチ サイズを 1 にする必要があります (既定では、CONCUR_SS_SCROLL_LOCKS の同時実行の場合は 8 行、その他の同時実行の場合は 128 行です)。</p></div><h1 class="heading">カーソルの変換</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>SQL Server では、要求されたものと異なる種類のカーソルを実装することもできます。これは暗黙のカーソル変換 (またはカーソルの下位変換) と呼ばれます。暗黙のカーソル変換の詳細については、SQL Server オンライン ブックの「暗黙のカーソル変換の使用」を参照してください。</p><p>SQL Server 2000 では、<b>ResultSet.TYPE_SCROLL_SENSITIVE</b> および <b>ResultSet.CONCUR_UPDATABLE</b> の結果セットを使用してデータを更新すると、"カーソルは読み取り専用です" というメッセージで例外がスローされます。この例外が発生するのは、SQL Server 2000 ではその結果セットに対して暗黙のカーソル変換が行われ、要求した更新可能なカーソルが返されないからです。</p><p>この問題を回避するには次の 2 つの方法があります。</p><ul><li><p>基になるテーブルに主キーがあることを確認する。</p></li><li><p>ステートメントを作成する際に、<b>ResultSet.TYPE_SCROLL_SENSITIVE</b> の代わりに <a href="d87afd89-3e75-402c-b844-1b434eb258df.htm">SQLServerResultSet.TYPE_SS_SCROLL_DYNAMIC</a> を使用する。</p></li></ul></div><h1 class="heading">カーソルの更新</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>直接の更新は、カーソルの種類および同時実行で更新が可能なカーソルについてサポートされています。カーソルの位置が結果セットの更新可能な行でない場合 (<b>get&lt;Type&gt;</b> メソッドの呼び出しが成功していない場合) は、<b>update&lt;Type&gt;</b> メソッドを呼び出すと "結果セットに現在の行がありません。" という意味のメッセージで例外がスローされます。JDBC の仕様には、CONCUR_READ_ONLY であるカーソルの列に対して更新メソッドが呼び出されると、例外が発生すると記載されています。更新または削除の競合のようなオプティミスティック同時実行制御の競合があった場合など、行が更新可能でない場合は、<a href="363d1008-1396-4fc0-8e27-c9ba2499e7f1.htm">insertRow</a>、<a href="cfced0ca-a281-40dc-8d2f-370d5f0bf12b.htm">updateRow</a>、または <a href="aa04a644-c7c2-4738-8b6e-7fea566d2c16.htm">deleteRow</a> が呼び出されるまで、例外は発生しません。</p><p><b>update&lt;Type&gt;</b> の呼び出し後は、<b>updateRow</b> または <a href="2ecacca4-f7bc-4f5d-886a-da7747fdccae.htm">cancelRowUpdates</a> が呼び出されるまで、影響を受けた列に <b>get&lt;Type&gt;</b> でアクセスすることはできません。これにより、サーバーによって返された型とは異なる型を使用して列が更新されるという問題と、その後の getter 呼び出しでクライアント側の型変換が生じ不正確な結果になるという問題が回避されます。<b>get&lt;Type&gt;</b> を呼び出すと、"更新された列には updateRow() または cancelRowUpdates() が呼び出されるまでアクセスできません。" という意味のメッセージで例外がスローされます。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>更新された列がない場合に <b>updateRow</b> メソッドが呼び出されると、JDBC ドライバーでは "updateRow() が呼び出されましたが、列が更新されていません" という意味のメッセージで例外がスローされます。</p></div><p><a href="f3c54bfe-d5b7-4f6e-ae6c-3e8954e5b1c9.htm">moveToInsertRow</a> が呼び出された後で、<b>get&lt;Type&gt;</b>、<b>update&lt;Type&gt;</b>、<b>insertRow</b>、およびカーソルの行を指定するメソッド (<a href="9a7c754c-2d72-4207-b3bd-2afc6047fb3d.htm">moveToCurrentRow</a> を含む) 以外のメソッドが結果セットに対して呼び出された場合は、例外がスローされます。<b>moveToInsertRow</b> メソッドによって結果セットが挿入モードになり、カーソルの行を指定するメソッドによって挿入モードが終了します。相対的なカーソル行を指定する呼び出しでは、<b>moveToInsertRow</b> が呼び出される前の位置を基準にカーソルが移動します。カーソルの行を指定する呼び出しの後は、その結果得られたカーソルの位置が新しいカーソル位置になります。</p><p>挿入モードで実行されたカーソルの行を指定する呼び出しが失敗した場合、その呼び出し後のカーソル位置は、<b>moveToInsetRow</b> が呼び出される前の元のカーソル位置になります。<b>insertRow</b> が失敗すると、カーソルは挿入行に残り、カーソルは挿入モードのままになります。</p><p>挿入行の列は、最初は初期化されていない状態です。<b>update&lt;Type&gt;</b> メソッドを呼び出すことで、列の状態が初期化済みに設定されます。初期化されていない列に対して <b>get&lt;Type&gt;</b> メソッドを呼び出すと、例外がスローされます。<b>insertRow</b> メソッドを呼び出すと、挿入行のすべての列が初期化されていない状態に戻ります。</p><p><b>insertRow</b> メソッドが呼び出されたときに初期化されていない列があった場合、その列の既定値が挿入されます。既定値がなく、列が null を許容する場合は、null が挿入されます。既定値がなく、列が null を許容しない場合は、サーバーがエラーを返し、例外がスローされます。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p /><p><b>getRow</b> メソッドを挿入モードで呼び出すと、0 が返されます。</p><p>JDBC ドライバーでは、位置を指定した更新または削除はできません。JDBC の仕様によると、<a href="3f3ec4f2-103a-4e16-9206-c5bd8639f946.htm">setCursorName</a> メソッドを使用しても効果はなく、<a href="e5b3af67-423a-4551-a4c6-a4bc076bd504.htm">getCursorName</a> メソッドを呼び出すと例外がスローされます。</p><p>読み取り専用および静的カーソルは更新できません。</p><p>SQL Server では、サーバー カーソルの使用が 1 つの結果セットに制限されています。バッチまたはストアド プロシージャに複数のステートメントが含まれる場合は、順方向専用かつ読み取り専用のクライアント カーソルを使用する必要があります。</p></div></div><span id="seeAlsoSpan"><h1 class="heading">関連項目</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="9ed5ad41-22e0-4e4a-8a79-10512db60d50.htm">JDBC ドライバーによる結果セットの管理</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">このトピックに関する<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dフィードバックありがとうございます。開発チームは、皆様からのフィードバックに基づいてドキュメントを改善しています。フィードバックを確認中、内容の確認または解決策に関するご意見をうかがうために電子メールをお送りする場合があります。お客様の電子メール アドレスをそれ以外の目的で使用することはありません。また、確認完了後はお客様の電子メール アドレス情報を削除させていただきます。%0\Aマイクロソフトのプライバシーに関する声明の詳細については、http://privacy.microsoft.com/ja-jp/default.aspx を参照してください。%0\A%0\d','カスタマー フィードバック');">フィードバック</a>を Microsoft にお送りください。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.All rights reserved.</a></p></span></div></div></body></html>