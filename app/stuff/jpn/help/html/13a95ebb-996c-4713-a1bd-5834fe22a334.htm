<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>結果セットのデータ サンプルのキャッシング</title><meta name="Language" content="ja-jp" /><meta name="System.Keywords" content="結果セットのサンプルのキャッシング" /><meta name="Microsoft.Help.Id" content="13a95ebb-996c-4713-a1bd-5834fe22a334" /><meta name="Description" content="この Microsoft JDBC Driver for SQL Server サンプル アプリケーションは、データベースから大きなデータ セットを取得し、SQLServerResultSet オブジェクトの setFetchSize メソッドを使用して、クライアント上でキャッシュされるデータの行数を制御する方法を示しています。" /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">結果セットのデータ サンプルのキャッシング</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>この Microsoft JDBC Driver for SQL Server サンプル アプリケーションは、データベースから大きなデータ セットを取得し、<a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> オブジェクトの <a href="233bf4f8-4758-42d0-a80b-33e34fa78027.htm">setFetchSize</a> メソッドを使用して、クライアント上でキャッシュされるデータの行数を制御する方法を示しています。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>クライアント上でキャッシュされる行数の制限は、結果セットが含むことのできる行の総数の制限とは異なります。結果セットに含まれる行の総数を制御するには、<a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> オブジェクトの <a href="cccc0667-589b-4655-8ea8-14ae8b2eb9dc.htm">setMaxRows</a> メソッドを使用します。これは、<a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> オブジェクトと <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> オブジェクトの両方に継承されます。</p></div><p>クライアント上でキャッシュされる行数に制限を設定するには、<b>Statement</b> オブジェクトの作成に使用するカーソルの種類を指定することで、いずれかの <b>Statement</b> オブジェクトを作成するときに、最初にサーバー側のカーソルを使用する必要があります。たとえば、JDBC ドライバーでは TYPE_SS_SERVER_CURSOR_FORWARD_ONLY というカーソルの種類が提供されます。これは、SQL Server データベースで使用する高速順方向専用、読み取り専用のサーバー側カーソルです。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>SQL Server 固有のカーソルの種類を使用する代わりに、selectMethod 接続文字列プロパティの値を "cursor" に設定して使用する方法もあります。JDBC ドライバーでサポートされるカーソルの種類の詳細については、「<span sdata="link"><a href="4f4d3db7-4f76-450d-ab63-141237a4f034.htm">カーソルの種類について</a></span>」を参照してください。</p></div><p><b>Statement</b> オブジェクトに含まれるクエリを実行し、データが結果セットとしてクライアントに返されたら、<b>setFetchSize</b> メソッドを呼び出して、データベースから一度に取得されるデータの量を制御できます。たとえば、100 行のデータを含むテーブルがあり、フェッチ サイズを 10 に設定した場合、任意の時点でクライアント上では 10 行のデータのみがキャッシュされます。これにより、データが処理される速度は遅くなりますが、クライアント上で使用されるメモリが少なくなるという利点があります。これは、大量のデータを処理する必要があるときに特に役立ちます。</p><p>このサンプルのコード ファイルは cacheRS.java という名前で、次の場所にあります。</p><p>&lt;<i>インストール ディレクトリ</i>&gt;\sqljdbc_&lt;<i>バージョン</i>&gt;\&lt;<i>言語</i>&gt;\help\samples\resultsets</p></div><h1 class="heading">要件</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>このサンプル アプリケーションを実行するには、クラスパスの設定で sqljdbc.jar ファイルまたは sqljdbc4.jar ファイルを追加する必要があります。クラスパスに sqljdbc.jar または sqljdbc4.jar のエントリがない場合、サンプル アプリケーションで "Class not found" という一般的な例外がスローされます。また、SQL Server 2005 AdventureWorks サンプル データベースへのアクセス権限も必要です。クラスパスの設定方法の詳細については、「<span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">JDBC ドライバーの使用</a></span>」を参照してください。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Microsoft JDBC Driver for SQL Server には、sqljdbc.jar と sqljdbc4.jar という 2 つのクラス ライブラリ ファイルが用意されており、必要な Java ランタイム環境 (JRE) 設定によって自由に使い分けることができます。選択する JAR ファイルの詳細については、「<span sdata="link"><a href="447792bb-f39b-49b4-9fd0-1ef4154c74ab.htm">JDBC Driver のシステム要件</a></span>」を参照してください。</p></div></div><h1 class="heading">使用例</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>次の例では、サンプル コードは AdventureWorks サンプル データベースへの接続を行います。次に、<a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> オブジェクトで SQL ステートメントを使用し、サーバー側のカーソルの種類を指定し、SQL ステートメントを実行して、返されたデータを <b>SQLServerResultSet</b> オブジェクトに配置します。</p><p>次に、サンプル コードはカスタム <b>timerTest</b> メソッドを呼び出し、使用するフェッチ サイズと結果セットを引数として渡します。<b>timerTest</b> メソッドは、<b>setFetchSize</b> メソッドを使用して結果セットのフェッチ サイズを設定し、テストの開始時刻を設定し、<span class="code">While</span> ループを使用して結果セットを繰り返し処理します。<span class="code">While</span> ループが終了したら、コードはテストの停止時刻を設定し、フェッチ サイズ、処理された行数、テストの実行にかかった時間など、テストの結果を表示します。</p><div class="sampleCode"><span codeLanguage="other"><pre>import java.sql.*;
import com.microsoft.sqlserver.jdbc.SQLServerResultSet;

public class cacheRS {

   public static void main(String[] args) {

      // Create a variable for the connection string.
      String connectionUrl = "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;

      try {

         // Establish the connection.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);

         // Create and execute an SQL statement that returns a large
         // set of data and then display it.
         String SQL = "SELECT * FROM Sales.SalesOrderDetail;";
         stmt = con.createStatement(SQLServerResultSet.TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, +
               SQLServerResultSet.CONCUR_READ_ONLY);

         // Perform a fetch for every row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1, rs);
         rs.close();

         // Perform a fetch for every tenth row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(10, rs);
         rs.close();

         // Perform a fetch for every 100th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(100, rs);
         rs.close();

         // Perform a fetch for every 1000th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1000, rs);
         rs.close();

         // Perform a fetch for every 128th row (the default) in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(0, rs);
         rs.close();
      }

      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }

      finally {
         if (rs != null) try { rs.close(); } catch(Exception e) {}
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }

   private static void timerTest(int fetchSize, ResultSet rs) {
      try {

         // Declare the variables for tracking the row count and elapsed time.
         int rowCount = 0;
         long startTime = 0;
         long stopTime = 0;
         long runTime = 0;

         // Set the fetch size then iterate through the result set to
         // cache the data locally.
         rs.setFetchSize(fetchSize);
         startTime = System.currentTimeMillis();
         while (rs.next()) {
            rowCount++;
         }
         stopTime = System.currentTimeMillis();
         runTime = stopTime - startTime;

         // Display the results of the timer test.
         System.out.println("FETCH SIZE: " + rs.getFetchSize());
         System.out.println("ROWS PROCESSED: " + rowCount);
         System.out.println("TIME TO EXECUTE: " + runTime);
         System.out.println();

      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}</pre></span></div></div><span id="seeAlsoSpan"><h1 class="heading">関連項目</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="4fc4b1c6-3075-4ad7-9244-865d9ede7ae6.htm">結果セットの処理</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">このトピックに関する<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dフィードバックありがとうございます。開発チームは、皆様からのフィードバックに基づいてドキュメントを改善しています。フィードバックを確認中、内容の確認または解決策に関するご意見をうかがうために電子メールをお送りする場合があります。お客様の電子メール アドレスをそれ以外の目的で使用することはありません。また、確認完了後はお客様の電子メール アドレス情報を削除させていただきます。%0\Aマイクロソフトのプライバシーに関する声明の詳細については、http://privacy.microsoft.com/ja-jp/default.aspx を参照してください。%0\A%0\d','カスタマー フィードバック');">フィードバック</a>を Microsoft にお送りください。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.All rights reserved.</a></p></span></div></div></body></html>