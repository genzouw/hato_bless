<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>基本データ型の使用</title><meta name="Language" content="ja-jp" /><meta name="System.Keywords" content="基本データ型" /><meta name="Microsoft.Help.Id" content="d7044936-5b8c-4def-858c-28a11ef70a97" /><meta name="Description" content="Microsoft JDBC Driver for SQL Server は、JDBC の基本データ型を使用して、SQL Server データ型を Java プログラミング言語によって認識できる形式に変換します。この逆の変換も行います。JDBC ドライバーでは、SQLXML データ型、および NCHAR、NVARCHAR、LONGNVARCHAR、NCLOB などの National (Unicode) データ型を含む JDBC 4.0 API がサポートされています。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">基本データ型の使用</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Microsoft JDBC Driver for SQL Server は、JDBC の基本データ型を使用して、SQL Server データ型を Java プログラミング言語によって認識できる形式に変換します。この逆の変換も行います。JDBC ドライバーでは、<span sdata="langKeyword" value="SQLXML"><span class="keyword">SQLXML</span></span> データ型、および <span sdata="langKeyword" value="NCHAR"><span class="keyword">NCHAR</span></span>、<span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span>、<span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span>、<span sdata="langKeyword" value="NCLOB"><span class="keyword">NCLOB</span></span> などの National (Unicode) データ型を含む JDBC 4.0 API がサポートされています。</p></div><h1 class="heading">データ型マッピング</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>次の表は、SQL Server、JDBC、および Java プログラミング言語の基本データ型間で行われる既定のマッピングを示しています。</p><div class="tableSection"><table width="50%" cellspacing="2" cellpadding="5" frame="lhs"><tr><th><p>SQL Server 型</p></th><th><p>JDBC 型 (java.sql.Types)</p></th><th><p>Java 言語型</p></th></tr><tr><td><p>bigint</p></td><td><p>BIGINT</p></td><td><p>long</p></td></tr><tr><td><p>binary</p></td><td><p>BINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>bit</p></td><td><p>BIT</p></td><td><p>boolean</p></td></tr><tr><td><p>char</p></td><td><p>CHAR</p></td><td><p>String</p></td></tr><tr><td><p>date</p></td><td><p>DATE</p></td><td><p>java.sql.Date</p></td></tr><tr><td><p>datetime</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>datetime2</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>datetimeoffset (2)</p></td><td><p>microsoft.sql.Types.DATETIMEOFFSET</p></td><td><p>microsoft.sql.DateTimeOffset</p></td></tr><tr><td><p>decimal</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>float</p></td><td><p>DOUBLE</p></td><td><p>double</p></td></tr><tr><td><p>image</p></td><td><p>LONGVARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>int</p></td><td><p>INTEGER</p></td><td><p>int</p></td></tr><tr><td><p>money</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>nchar</p></td><td><p>CHAR</p><p>NCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>ntext</p></td><td><p>LONGVARCHAR</p><p>LONGNVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>numeric</p></td><td><p>NUMERIC</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>nvarchar</p></td><td><p>VARCHAR</p><p>NVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>nvarchar(max)</p></td><td><p>VARCHAR</p><p>NVARCHAR (Java SE 6.0)</p></td><td><p>String</p></td></tr><tr><td><p>real</p></td><td><p>REAL</p></td><td><p>float</p></td></tr><tr><td><p>smalldatetime</p></td><td><p>TIMESTAMP</p></td><td><p>java.sql.Timestamp</p></td></tr><tr><td><p>smallint</p></td><td><p>SMALLINT</p></td><td><p>short</p></td></tr><tr><td><p>smallmoney</p></td><td><p>DECIMAL</p></td><td><p>java.math.BigDecimal</p></td></tr><tr><td><p>text</p></td><td><p>LONGVARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>time</p></td><td><p>TIME (1)</p></td><td><p>java.sql.Time (1)</p></td></tr><tr><td><p>timestamp</p></td><td><p>BINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>tinyint</p></td><td><p>TINYINT</p></td><td><p>short</p></td></tr><tr><td><p>udt</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>uniqueidentifier</p></td><td><p>CHAR</p></td><td><p>String</p></td></tr><tr><td><p>varbinary</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p>varbinary(max)</p></td><td><p>VARBINARY</p></td><td><p>byte[]</p></td></tr><tr><td><p /></td><td><p /></td><td><p /></td></tr><tr><td><p>varchar</p></td><td><p>VARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>varchar(max)</p></td><td><p>VARCHAR</p></td><td><p>String</p></td></tr><tr><td><p>xml</p></td><td><p>LONGVARCHAR</p><p>LONGNVARCHAR (Java SE 6.0)</p></td><td><p>String</p><p>SQLXML</p></td></tr></table></div><p>(1) 時刻の SQL Server データ型を持つ java.sql.Time を使用する場合は、<span sdata="langKeyword" value="sendTimeAsDatetime"><span class="keyword">sendTimeAsDatetime</span></span> 接続プロパティを false に設定します。</p><p>(2) <span sdata="link"><a href="20bbeacd-ccca-4a46-8184-ff941ae2ec5f.htm">DateTimeOffset クラス</a></span> で、<span sdata="langKeyword" value="datetimeoffset"><span class="keyword">datetimeoffset</span></span> の値にプログラムでアクセスできます。</p><p>SQL Server sqlvariant データ型は、JDBC ドライバーでは現在サポートされていません。sqlvariant データ型の列を含むテーブルからデータを取得するクエリを使用すると、例外が発生します。</p><p>以下のセクションでは、JDBC ドライバーと基本データ型の使用方法の例を示します。Java アプリケーションの基本データ型の使用方法の詳細例については、「<span sdata="link"><a href="59ac80cf-fc66-4493-933d-38e479c5f54d.htm">基本データ型のサンプル</a></span>」を参照してください。</p></div><h1 class="heading">文字列としてのデータの取得</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>文字列として参照するために JDBC 基本データ型にマップされるデータ ソースからデータを取得する必要がある場合、または厳密に型指定されたデータを必要としない場合は、次のように <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> クラスの <a href="f81dde01-d328-4b32-8871-1efac645b68e.htm">getString</a> メソッドを使用できます。</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>String SQL = "SELECT TOP 10 * FROM Person.Contact";
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery(SQL);

while (rs.next()) {
   System.out.println(rs.getString(4) + " " + rs.getString(6));
}
rs.close();
stmt.close();

</pre></span></div></div></div><h1 class="heading">データ型によるデータの取得</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p>データ ソースからデータを取得する必要があり、取得するデータの型がわかっている場合は、<b>SQLServerResultSet</b> クラスのいずれかの <b>get&lt;Type&gt;</b> メソッドを使用します。これらは、<span class="term">getter メソッド</span>とも呼ばれます。<b>get&lt;Type&gt;</b> メソッドでは、次のように列名または列インデックスを使用できます。</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getShort("job_id");
rs.close();
stmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p><b>getUnicodeStream</b> メソッドおよび小数点以下桁数付きの <b>getBigDecimal</b> メソッドは、JDBC ドライバーでは推奨されていないため、サポートされていません。</p></div></div><h1 class="heading">データ型によるデータの更新</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p>データ ソースのフィールドの値を更新する必要がある場合は、<b>SQLServerResultSet</b> クラスのいずれかの <b>update&lt;Type&gt;</b> メソッドを使用します。次の例では、<a href="2bb0319e-12cb-4604-a7e3-b22a24b02296.htm">updateInt</a> メソッドを <a href="cfced0ca-a281-40dc-8d2f-370d5f0bf12b.htm">updateRow</a> メソッドと組み合わせて使用し、データ ソース内のデータを更新します。</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); 
ResultSet rs = stmt.executeQuery("SELECT lname, job_id FROM employee
   WHERE (lname = 'Brown')");
rs.next();
short empJobID = rs.getInt(2);
empJobID++;
rs.first();
rs.updateInt(2, empJobID);
rs.updateRow();
rs.close();
stmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>JDBC ドライバーは、127 文字を超える列名の SQL Server の列を更新できません。列名が 127 文字を超える列を更新しようとすると、例外がスローされます。</p></div></div><h1 class="heading">パラメーター化クエリによるデータの更新</h1><div id="sectionSection4" class="section" name="collapseableSection" style=""><p>パラメーター化クエリを使用してデータ ソースのデータを更新する必要がある場合は、<a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> クラスのいずれかの <b>set&lt;Type&gt;</b> メソッドを使用して、パラメーターのデータ型を設定できます。これらは、<span class="term">setter メソッド</span>とも呼ばれます。次の例では、<a href="bd4e4085-f704-4a73-b6a7-7d443d564728.htm">prepareStatement</a> メソッドを使用して、パラメーター化クエリをプリコンパイルし、<a href="25dabdc9-c60f-485a-87eb-306067964765.htm">setString</a> メソッドを使用してパラメーターの文字列値を設定してから、<a href="ca534c6b-ef4d-4ae8-8cc3-514728623cff.htm">executeUpdate</a> メソッドを呼び出します。</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>PreparedStatement pstmt = con.prepareStatement("UPDATE employee SET
   fname = ? WHERE (lname = 'Brown')");
String first = "Bob";
pstmt.setString(1, first);
int rowCount = pstmt.executeUpdate();
pstmt.close();

</pre></span></div></div><p>パラメーター化クエリの詳細については、「<span sdata="link"><a href="3202b88f-ce13-44dd-982c-c6a3b0260378.htm">パラメータがある SQL ステートメントの使用</a></span>」を参照してください。</p></div><h1 class="heading">ストアド プロシージャにパラメーターを渡す</h1><div id="sectionSection5" class="section" name="collapseableSection" style=""><p>入力されたパラメーターをストアド プロシージャに渡す必要がある場合は、<a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> クラスのいずれかの <b>set&lt;Type&gt;</b> メソッドを使用して、インデックスまたは名前でパラメーターを設定できます。次の例では、<a href="265b024c-898a-4bd0-98b5-f06076717b9e.htm">prepareCall</a> メソッドを使用してストアド プロシージャへの呼び出しを設定し、<a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a> メソッドを使用して呼び出し用のパラメーターを設定してから、<a href="599cf463-e19f-4baa-bacb-513cad7c6cd8.htm">executeQuery</a> メソッドを呼び出します。</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid(?)}");
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
rs.close();
cstmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>この例では、結果セットはストアド プロシージャの実行結果で返されます。</p></div><p>JDBC ドライバーでストアド プロシージャと入力パラメーターを使用する方法の詳細については、「<span sdata="link"><a href="8f491b70-7d1b-42bd-964f-9a8b86af5eaa.htm">入力パラメーターがあるストアド プロシージャの使用</a></span>」を参照してください。</p></div><h1 class="heading">ストアド プロシージャからのパラメーターの取得</h1><div id="sectionSection6" class="section" name="collapseableSection" style=""><p>ストアド プロシージャからパラメーターを取得する必要がある場合は、まず <b>SQLServerCallableStatement</b> クラスの <a href="82f8d608-efc1-4af8-a985-ec25d19420aa.htm">registerOutParameter</a> メソッドを使用して名前またはインデックスで out パラメーターを登録し、ストアド プロシージャへの呼び出しを実行してから、返された out パラメーターを適切な変数に割り当てる必要があります。次の例では、<b>prepareCall</b> メソッドを使用してストアド プロシージャへの呼び出しを設定し、<b>registerOutParameter</b> メソッドを使用して out パラメーターを設定します。次に、<a href="f38b97b5-d4f0-4f74-a33d-740241a85842.htm">setString</a> メソッドを使用して呼び出し用のパラメーターを設定し、<b>executeQuery</b> メソッドを呼び出します。ストアド プロシージャの out パラメーターによって返される値は、<a href="9e3c51bc-7285-4f28-92c8-cfa05e49da9e.htm">getShort</a> メソッドを使用して取得します。</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>CallableStatement cstmt = con.prepareCall("{call employee_jobid (?, ?)}");
cstmt.registerOutParameter(2, java.sql.Types.SMALLINT);
String lname = "Brown";
cstmt.setString(1, lname);
Resultset rs = cstmt.executeQuery();
short empJobID = cstmt.getShort(2);
rs.close();
cstmt.close();

</pre></span></div></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>out パラメーターが返されるだけでなく、ストアド プロシージャの実行結果により作成された結果セットが返されることもあります。</p></div><p>JDBC ドライバーでストアド プロシージャと出力パラメーターを使用する方法の詳細については、「<span sdata="link"><a href="1c006f27-7e99-43d5-974c-7b782659290c.htm">出力パラメーターがあるストアド プロシージャの使用</a></span>」を参照してください。</p></div><span id="seeAlsoSpan"><h1 class="heading">関連項目</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">JDBC ドライバーのデータ型について</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">このトピックに関する<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dフィードバックありがとうございます。開発チームは、皆様からのフィードバックに基づいてドキュメントを改善しています。フィードバックを確認中、内容の確認または解決策に関するご意見をうかがうために電子メールをお送りする場合があります。お客様の電子メール アドレスをそれ以外の目的で使用することはありません。また、確認完了後はお客様の電子メール アドレス情報を削除させていただきます。%0\Aマイクロソフトのプライバシーに関する声明の詳細については、http://privacy.microsoft.com/ja-jp/default.aspx を参照してください。%0\A%0\d','カスタマー フィードバック');">フィードバック</a>を Microsoft にお送りください。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.All rights reserved.</a></p></span></div></div></body></html>