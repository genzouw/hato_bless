<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>大きなデータを更新するサンプル</title><meta name="Language" content="ja-jp" /><meta name="System.Keywords" content="アダプティブ バッファリング" /><meta name="System.Keywords" content="アダプティブ バッファリングのサンプル" /><meta name="System.Keywords" content="isWrapperFor" /><meta name="System.Keywords" content="大きなデータ" /><meta name="System.Keywords" content="応答バッファリング" /><meta name="System.Keywords" content="unwrap" /><meta name="System.Keywords" content="アダプティブ バッファリングの使用" /><meta name="Microsoft.Help.Id" content="76ecc05f-a77d-40a2-bab9-91a7fcf17347" /><meta name="Description" content="この Microsoft JDBC Driver for SQL Server サンプル アプリケーションは、データベース内の大きな列値を更新する方法を示しています。" /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">大きなデータを更新するサンプル</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>この Microsoft JDBC Driver for SQL Server サンプル アプリケーションは、データベース内の大きな列値を更新する方法を示しています。</p><p>このサンプルのコード ファイルは updateLargeData.java という名前で、次の場所にあります。</p><p>&lt;<i>インストール ディレクトリ</i>&gt;\sqljdbc_&lt;<i>バージョン</i>&gt;\&lt;<i>言語</i>&gt;\help\samples\adaptive</p></div><h1 class="heading">要件</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>このサンプル アプリケーションを実行するには、SQL Server 2005 AdventureWorks サンプル データベースへのアクセス権が必要です。また、クラスパスの設定で sqljdbc4.jar ファイルを追加する必要があります。クラスパスに sqljdbc4.jar のエントリがない場合、サンプル アプリケーションで "Class not found" という一般的な例外がスローされます。クラスパスの設定方法の詳細については、「<span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">JDBC ドライバーの使用</a></span>」を参照してください。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Microsoft JDBC Driver for SQL Server には、sqljdbc.jar と sqljdbc4.jar という 2 つのクラス ライブラリ ファイルが用意されており、必要な Java ランタイム環境 (JRE) 設定によって自由に使い分けることができます。このサンプルは、JDBC 4.0 API で導入された <a href="53f3291f-d43a-476b-a656-d86168dacf6c.htm">isWrapperFor</a> メソッドと <a href="ce680176-ef04-4e44-bb6c-ec50bd06e7e6.htm">unwrap</a> メソッドを使用して、ドライバー固有の応答バッファリング メソッドにアクセスします。このサンプルをコンパイルして実行するには、JDBC 4.0 をサポートする sqljdbc4.jar クラス ライブラリが必要となります。選択する JAR ファイルの詳細については、「<span sdata="link"><a href="447792bb-f39b-49b4-9fd0-1ef4154c74ab.htm">JDBC Driver のシステム要件</a></span>」を参照してください。</p></div></div><h1 class="heading">使用例</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>次の例のサンプル コードでは、SQL Server 2005 AdventureWorks データベースへの接続を行います。さらに、Statement オブジェクトを作成し、<a href="53f3291f-d43a-476b-a656-d86168dacf6c.htm">isWrapperFor</a> メソッドを使用して、Statement オブジェクトが、指定された <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> クラスのラッパーであるかどうかをチェックします。ドライバー固有の応答バッファリング メソッドにアクセスするために、<a href="ce680176-ef04-4e44-bb6c-ec50bd06e7e6.htm">unwrap</a> メソッドが使用されています。 </p><p>次に、<a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> クラスの <a href="9f489835-6cda-4c8c-b139-079639a169cf.htm">setResponseBuffering</a> メソッドを使用して、応答バッファリング モードを "<span sdata="langKeyword" value="adaptive"><span class="keyword">adaptive</span></span>" に設定します。サンプル コードを見ると、アダプティブ バッファリング モードの取得方法も確認できます。</p><p>さらに、SQL ステートメントを実行し、返されたデータを更新可能な <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> オブジェクトに設定しています。</p><p>最後に、結果セットに格納されているデータ行を反復処理します。空のドキュメント概要が見つかった場合、<a href="0cf286c7-9dcd-4b02-a568-ba6b6eb27e82.htm">updateString</a> メソッドと <a href="cfced0ca-a281-40dc-8d2f-370d5f0bf12b.htm">updateRow</a> メソッドを組み合わせて使用して、データの行を更新し、再度データベースに格納します。既にデータが存在する場合は、<a href="f81dde01-d328-4b32-8871-1efac645b68e.htm">getString</a> メソッドを使用して、格納されているデータの一部が表示されます。</p><p>ドライバーの既定の動作は "<span sdata="langKeyword" value="adaptive."><span class="keyword">adaptive.</span></span>" です。ただし、順方向専用の更新可能な結果セットの場合で、なおかつ、結果セットのデータのサイズが、アプリケーションのメモリ容量を超える場合は、<a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a> クラスの <a href="9f489835-6cda-4c8c-b139-079639a169cf.htm">setResponseBuffering</a> メソッドを使用して、アプリケーションからアダプティブ バッファリング モードを明示的に設定する必要があります。</p><div name="snippetGroup"><div class="sampleCode"><span codeLanguage="Java"><pre>import java.sql.*;
import java.io.*;
import com.microsoft.sqlserver.jdbc.SQLServerStatement;

public class updateLargeData {
	
   public static void main(String[] args) {

      // Create a variable for the connection string.
      String connectionUrl = 
    	    "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;  
      Reader reader = null;

      try {
          // Establish the connection.
          Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
          con = DriverManager.getConnection(connectionUrl);

          stmt = con.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);

          // Since the summaries could be large, make sure that
          // the driver reads them incrementally from a database, 
          // even though a server cursor is used for the updatable result sets.

          // The recommended way to access the Microsoft JDBC Driver for SQL Server 
          // specific methods is to use the JDBC 4.0 Wrapper functionality. 
          // The following code statement demonstrates how to use the 
          // Statement.isWrapperFor and Statement.unwrap methods
          // to access the driver specific response buffering methods.

          if (stmt.isWrapperFor(com.microsoft.sqlserver.jdbc.SQLServerStatement.class)) {
              SQLServerStatement SQLstmt = 
                 stmt.unwrap(com.microsoft.sqlserver.jdbc.SQLServerStatement.class);
        	  
              SQLstmt.setResponseBuffering("adaptive");
              System.out.println("Response buffering mode has been set to " +
                 SQLstmt.getResponseBuffering());
          }

          // Select all of the document summaries.
          rs = stmt.executeQuery("SELECT Title, DocumentSummary FROM Production.Document");

          // Update each document summary.
          while (rs.next()) {

               // Retrieve the original document summary.
               reader = rs.getCharacterStream("DocumentSummary");

               if (reader == null)
               {
                   // Update the document summary.
                   System.out.println("Updating " + rs.getString("Title"));
                   rs.updateString("DocumentSummary", "Work in progress");
                   rs.updateRow();
               }
               else
               {
            	   // Do something with the chunk of the data that was                   
                   // read.
                   System.out.println("reading " + rs.getString("Title"));
                   reader.close();
                   reader = null;
               }
          }
      }
      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }
      finally {
          if (reader != null) try { reader.close(); } catch(Exception e) {}
          if (rs != null) try { rs.close(); } catch(Exception e) {}
          if (stmt != null) try { stmt.close(); } catch(Exception e) {}
    	  if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }
}

</pre></span></div></div></div><span id="seeAlsoSpan"><h1 class="heading">関連項目</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="5b93569f-eceb-4f05-b49c-067564cd3c85.htm">大きなデータの処理</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">このトピックに関する<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dフィードバックありがとうございます。開発チームは、皆様からのフィードバックに基づいてドキュメントを改善しています。フィードバックを確認中、内容の確認または解決策に関するご意見をうかがうために電子メールをお送りする場合があります。お客様の電子メール アドレスをそれ以外の目的で使用することはありません。また、確認完了後はお客様の電子メール アドレス情報を削除させていただきます。%0\Aマイクロソフトのプライバシーに関する声明の詳細については、http://privacy.microsoft.com/ja-jp/default.aspx を参照してください。%0\A%0\d','カスタマー フィードバック');">フィードバック</a>を Microsoft にお送りください。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.All rights reserved.</a></p></span></div></div></body></html>