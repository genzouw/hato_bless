<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>データベース ミラーリングの使用 (JDBC)</title><meta name="Language" content="ja-jp" /><meta name="System.Keywords" content="ミラーリング" /><meta name="Microsoft.Help.Id" content="4ff59218-0d3b-4274-b647-9839c4955865" /><meta name="Description" content="データベース ミラーリングは、主にデータベースの可用性とデータの冗長性を向上するためのソフトウェア ソリューションです。Microsoft JDBC Driver for SQL Server は、データベース ミラーリングを暗黙的にサポートするため、データベース用に構成されていれば、開発者がコードを記述したり、その他の操作を行ったりする必要はありません。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">データベース ミラーリングの使用 (JDBC)</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>データベース ミラーリングは、主にデータベースの可用性とデータの冗長性を向上するためのソフトウェア ソリューションです。Microsoft JDBC Driver for SQL Server は、データベース ミラーリングを暗黙的にサポートするため、データベース用に構成されていれば、開発者がコードを記述したり、その他の操作を行ったりする必要はありません。</p><p>データベース ミラーリングは、データベースごとに実装され、スタンバイ サーバー上に SQL Server 運用データベースのコピーを保持します。このサーバーは、データベース ミラーリング セッションの構成と状態によって、ホット スタンバイ サーバーまたはウォーム スタンバイ サーバーのいずれかになります。ホット スタンバイ サーバーは、コミットされたトランザクションを損失することなくラピッド フェールオーバーをサポートし、ウォーム スタンバイ サーバーは、サービス強制をサポートします (データ損失の可能性があります)。</p><p>運用データベースは<span class="term">プリンシパル</span> データベースと呼ばれ、スタンバイ コピーは<span class="term">ミラー</span> データベースと呼ばれます。プリンシパル データベースとミラー データベースは、SQL Server の別々のインスタンス (サーバー インスタンス) 上に存在する必要があります。また、可能であれば、これらのデータベースは別々のコンピューター上に配置してください。</p><p>プリンシパル サーバーと呼ばれる運用サーバー インスタンスは、ミラー サーバーと呼ばれるスタンバイ サーバー インスタンスと通信します。プリンシパル サーバーとミラー サーバーは、データベース ミラーリング セッション内でパートナーとして機能します。プリンシパル サーバーで障害が発生した場合、ミラー サーバーは<span class="term">フェールオーバー</span>と呼ばれる処理を通じて、ミラー サーバーのデータベースをプリンシパル データベースにできます。たとえば、Partner_A と Partner_B は 2 つのパートナー サーバーで、最初はプリンシパル サーバーの Partner_A にプリンシパル データベース、ミラー サーバーの Partner_B にミラー データベースが存在するとします。Partner_A がオフラインになった場合は、Partner_B 上のデータベースをフェールオーバーして、現在のプリンシパル データベースにできます。Partner_A がミラーリング セッションに再び参加すると、Partner_A はミラー サーバーとなり、Partner_A のデータベースはミラー データベースとなります。</p><p>Partner_A サーバーが破損して修復不可能な場合は、Partner_C サーバーをオンラインにして、プリンシパル サーバーとなった Partner_B のミラー サーバーとして機能させることができます。ただし、このシナリオでは、データベース ミラーリング構成で使用される新しいサーバー名で接続文字列プロパティが更新されるように、クライアント アプリケーションにプログラミング ロジックを含める必要があります。含めない場合、サーバーへの接続に失敗する可能性があります。</p><p>代替のデータベース ミラーリング構成では、さまざまなレベルのパフォーマンスおよびデータ安全性が提供され、異なる形式のフェールオーバーがサポートされます。詳細については、SQL Server オンライン ブックの「データベース ミラーリングの概要」を参照してください。</p></div><h1 class="heading">プログラムに関する考慮事項</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>プリンシパル データベース サーバーで障害が発生すると、クライアント アプリケーションは API 呼び出しの応答としてエラーを受信します。これは、データベースへの接続が失われたことを示します。この問題が発生すると、データベースに対するコミットされていない変更はすべて失われ、現在のトランザクションはロールバックされます。このような場合、アプリケーションでは接続を閉じて (または、データ ソース オブジェクトを解放して) から、再び開く必要があります。接続時に、新しい接続はプリンシパル サーバーとなったミラー データベースに透過的にリダイレクトされます。クライアントが接続文字列またはデータ ソース オブジェクトを変更する必要はありません。</p><p>接続が最初に確立されると、プリンシパル サーバーはフェールオーバー パートナーの ID を、フェールオーバー発生時に使用されるクライアントに送信します。アプリケーションが障害の発生したプリンシパル サーバーと最初の接続を確立しようとするとき、フェールオーバー パートナーの ID はクライアントに通知されていません。クライアントがこのシナリオに対処できるように、failoverPartner 接続文字列プロパティ、およびオプションで <a href="5310b7c2-9d10-474f-ad3a-218fe5da694b.htm">setFailoverPartner</a> データ ソース メソッドを使用することで、クライアントはフェールオーバー パートナーの ID を独自に指定できます。クライアント プロパティはこのシナリオでのみ使用されます。プリンシパル サーバーが利用可能な場合は使用されません。</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>接続文字列またはデータ ソース オブジェクトで failoverPartner が指定されている場合は、databaseName プロパティも設定する必要があります。これが設定されていないと、例外がスローされます。failoverPartner および databaseName が明示的に指定されていないと、プリンシパル データベース サーバーに障害が発生した場合に、アプリケーションがフェールオーバーを実行しません。つまり、透過的なリダイレクトは、failoverPartner および databaseName が明示的に指定された接続に対してのみ機能します。failoverPartner およびその他の接続文字列プロパティの詳細については、「<span sdata="link"><a href="f1b62700-f046-488d-bd6b-a5cd8fc345b7.htm">接続プロパティの設定</a></span>」を参照してください。</p></div><p>クライアントで指定されたフェールオーバー パートナー サーバーが、指定されたデータベースのフェールオーバー パートナーの役割を担っているサーバーを参照していない場合で、なおかつ参照先のサーバー/データベースがミラーリング機構に属している場合、接続はサーバーによって拒否されます。<a href="097434fd-2b74-411c-a5ed-eba04481dde5.htm">SQLServerDataSource</a> クラスは <a href="885f927f-9c48-42e0-a7fb-fd936d2b8130.htm">getFailoverPartner</a> メソッドを提供しますが、このメソッドは接続文字列または <b>setFailoverPartner</b> メソッドで指定されたフェールオーバー パートナーの名前のみを返します。現在使用されている実際のフェールオーバー パートナーの名前を取得するには、次の Transact-SQL ステートメントを使用します。</p><div class="sampleCode"><span codeLanguage="other"><pre>SELECT m.mirroring_role_DESC, m.mirroring_state_DESC,
m.mirroring_partner_instance FROM sys.databases as db,
sys.database_mirroring AS m WHERE db.name = 'MirroringDBName'
AND db.database_id = m.database_id</pre></span></div><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>ミラーリング データベースの名前を使用するには、このステートメントを変更する必要があります。</p></div><p>接続の最初の試行が失敗した場合に備えて、接続文字列を更新するか、または再試行の戦略を立てるために、パートナー情報をキャッシュすることを検討してください。</p></div><h1 class="heading">例</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p>次の例では、最初にプリンシパル サーバーへの接続が試行されます。接続に失敗して例外がスローされた場合、ミラー サーバーへの接続が試行されます。ミラー サーバーは新しいプリンシパル サーバーに昇格している可能性があります。接続文字列での failoverPartner プロパティの使用に注意してください。</p><div class="sampleCode"><span codeLanguage="other"><pre>import java.sql.*;

public class clientFailover {

   public static void main(String[] args) {

      // Create a variable for the connection string.
      String connectionUrl = "jdbc:sqlserver://serverA:1433;" +
         "databaseName=AdventureWorks;integratedSecurity=true;" +
         "failoverPartner=serverB";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;

      try {
         // Establish the connection to the principal server.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);
         System.out.println("Connected to the principal server.");

         // Note that if a failover of serverA occurs here, then an
         // exception will be thrown and the failover partner will
         // be used in the first catch block below.

         // Create and execute an SQL statement that inserts some data.
         stmt = con.createStatement();

         // Note that the following statement assumes that the 
         // TestTable table has been created in the AdventureWorks
         // sample database.
         stmt.executeUpdate("INSERT INTO TestTable (Col2, Col3) VALUES ('a', 10)");
      }

      // Handle any errors that may have occurred.
      catch (SQLException se) {
         try {
            // The connection to the principal server failed,
            // try the mirror server which may now be the new
            // principal server.
            System.out.println("Connection to principal server failed, " +
            "trying the mirror server.");
            con = DriverManager.getConnection(connectionUrl);
            System.out.println("Connected to the new principal server.");
            stmt = con.createStatement();
            stmt.executeUpdate("INSERT INTO TestTable (Col2, Col3) VALUES ('a', 10)");
         }
         catch (Exception e) {
            e.printStackTrace();
         }
      }
      catch (Exception e) {
         e.printStackTrace();
      }
      // Close the JDBC objects.
      finally {
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }
}</pre></span></div></div><span id="seeAlsoSpan"><h1 class="heading">関連項目</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="94bcfbe3-f00e-4774-bda8-bb7577518fec.htm">JDBC ドライバーによる SQL Server への接続</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">このトピックに関する<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dフィードバックありがとうございます。開発チームは、皆様からのフィードバックに基づいてドキュメントを改善しています。フィードバックを確認中、内容の確認または解決策に関するご意見をうかがうために電子メールをお送りする場合があります。お客様の電子メール アドレスをそれ以外の目的で使用することはありません。また、確認完了後はお客様の電子メール アドレス情報を削除させていただきます。%0\Aマイクロソフトのプライバシーに関する声明の詳細については、http://privacy.microsoft.com/ja-jp/default.aspx を参照してください。%0\A%0\d','カスタマー フィードバック');">フィードバック</a>を Microsoft にお送りください。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.All rights reserved.</a></p></span></div></div></body></html>