<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>データ型変換について</title><meta name="Language" content="ja-jp" /><meta name="System.Keywords" content="データ型変換" /><meta name="Microsoft.Help.Id" content="98fa7488-aac3-45b4-8aa4-83ed6ab638b4" /><meta name="Description" content="Java プログラミング言語のデータ型を SQL Server データ型へ容易に変換できるようにするため、Microsoft JDBC Driver for SQL Server には、JDBC の仕様で必要とされるデータ型変換が用意されています。さらに高い柔軟性を得るために、すべての型を Object、String、および byte[] のデータ型との間で変換できるようになりました。" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">データ型変換について</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Java プログラミング言語のデータ型を SQL Server データ型へ容易に変換できるようにするため、Microsoft JDBC Driver for SQL Server には、JDBC の仕様で必要とされるデータ型変換が用意されています。さらに高い柔軟性を得るために、すべての型を <span sdata="langKeyword" value="Object"><span class="keyword">Object</span></span>、<span sdata="langKeyword" value="String"><span class="keyword">String</span></span>、および <span sdata="langKeyword" value="byte[]"><span class="keyword">byte[]</span></span> のデータ型との間で変換できるようになりました。</p></div><h1 class="heading">getter メソッドの変換</h1><div id="sectionSection0" class="section" name="collapseableSection" style=""><p>次の図は、SQL Server データ型に基づいて、<a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> クラスの <b>get&lt;Type&gt;()</b> メソッド用の JDBC ドライバーの変換マップ、および <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> クラスの <b>get&lt;Type&gt;</b> メソッドでサポートされている変換を示しています。</p><img alt="JDBCGetterConversions" src="../art/JDBCGetterConversions.gif" /><p>JDBC ドライバーの getter メソッドでサポートされている変換には、次の 3 つのカテゴリがあります。</p><ul><li><p><span class="label">データ損失なし (x)</span>: getter 型が、基になるサーバーの型と同じか、またはそれより小さい場合の変換です。たとえば、基になるサーバーの decimal 列で <b>getBigDecimal</b> を呼び出すとき、変換は必要ありません。</p></li><li><p><span class="label">変換 (y)</span>: サーバーの数値型から Java 言語型への変換です。変換は通常の変換で、Java 言語変換ルールに従って行われます。これらの変換では、有効桁数は四捨五入されることはなく常に切り捨てられます。オーバーフローは変換後の型の剰余として処理され、変換前より小さくなります。たとえば、"1.9999" を含む基になる <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 列で <b>getInt</b> を呼び出すと、"1" が返されます。基になる <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 値が "3000000000" の場合、<span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 値はオーバーフローして "-1294967296" となります。</p></li><li><p><span class="label">データに依存 (z)</span>: 基になる文字型から数値型への変換では、文字型は数値型に変換できる値を含んでいる必要があります。これ以外の変換は行われません。値が getter 型には大きすぎる場合、その値は有効ではありません。たとえば、"53" を含む varchar(50) 列で <b>getInt</b> が呼び出された場合、値は <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> として返されます。基になる値が "xyz" または "3000000000" の場合は、エラーがスローされます。</p></li></ul><p><span sdata="langKeyword" value="binary"><span class="keyword">binary</span></span>、<span sdata="langKeyword" value="varbinary"><span class="keyword">varbinary</span></span>、<span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span>、<span sdata="langKeyword" value="image"><span class="keyword">image</span></span> のいずれかの列データ型に対して <b>getString</b> を呼び出した場合、16 進形式の文字列値として値が返されます。</p></div><h1 class="heading">updater メソッドの変換</h1><div id="sectionSection1" class="section" name="collapseableSection" style=""><p><a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a> クラスの <b>update&lt;Type&gt;()</b> メソッドに渡された、Java で型指定されたデータには、次の変換が適用されます。</p><img alt="JDBCUpdaterConversions" src="../art/JDBC_JDBCUpdatterConversions.gif" /><p>JDBC ドライバーの updater メソッドでサポートされている変換には、次の 3 つのカテゴリがあります。</p><ul><li><p><span class="label">データ損失なし (x)</span>: updater 型が、基になるサーバーの型と同じか、またはそれより小さい場合の変換です。たとえば、基になるサーバーの decimal 列で <b>updateBigDecimal</b> を呼び出すとき、変換は必要ありません。</p></li><li><p><span class="label">変換 (y)</span>: サーバーの数値型から Java 言語型への変換です。変換は通常の変換で、Java 言語変換ルールに従って行われます。これらの変換では、有効桁数は四捨五入されることはなく常に切り捨てられます。オーバーフローは変換後の型の剰余として処理され、変換前より小さくなります。たとえば、"1.9999" を含む基になる <span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 列で <b>updateDecimal</b> を呼び出すと、"1" が返されます。基になる <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 値が "3000000000" の場合、<span sdata="langKeyword" value="int"><span class="keyword">int</span></span> 値はオーバーフローして "-1294967296" となります。</p></li><li><p><span class="label">データに依存 (z)</span>: 基になるデータ型を別のデータ型に変換するには、前者の型が後者の型に変換可能な値を含んでいることが必要です。これ以外の変換は行われません。値が getter 型には大きすぎる場合、その値は有効ではありません。たとえば、"53" が格納された int 列に対して <b>updateString</b> を呼び出した場合、更新は成功しますが、基になる文字列値が "foo" や "3000000000" であった場合は、エラーがスローされます。</p></li></ul><p><span sdata="langKeyword" value="binary"><span class="keyword">binary</span></span>、<span sdata="langKeyword" value="varbinary"><span class="keyword">varbinary</span></span>、<span sdata="langKeyword" value="varbinary(max)"><span class="keyword">varbinary(max)</span></span>、<span sdata="langKeyword" value="image"><span class="keyword">image</span></span> のいずれかの列データ型に対して <b>updateString</b> を呼び出した場合、文字列値が 16 進形式の文字列値として処理されます。</p><p>SQL Server の列データ型が <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> の場合、データ値は有効な <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> であることが必要です。<b>updateBytes</b> メソッド、<b>updateBinaryStream</b> メソッド、または <b>updateBlob</b> メソッドを呼び出す場合、データ値は、XML 文字の 16 進形式の文字列表記である必要があります。次に例を示します。</p><div class="sampleCode"><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div><p>XML 文字に特定の文字エンコードが使用されている場合は、バイト順マーク (BOM) が必要です。</p></div><h1 class="heading">setter メソッドの変換</h1><div id="sectionSection2" class="section" name="collapseableSection" style=""><p><a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> クラスおよび <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a> クラスの <b>set&lt;Type&gt;()</b> メソッドに渡された、Java で型指定されたデータには、次の変換が適用されます。</p><img alt="JDBCSetterConversions" src="../art/JDBC_JDBCSetterConversions_v2.gif" /><p>サーバーはすべての変換を試みて、変換に失敗した場合はエラーを返します。</p><p><span sdata="langKeyword" value="String"><span class="keyword">String</span></span> データ型の場合、値は <span sdata="langKeyword" value="VARCHAR"><span class="keyword">VARCHAR</span></span> の長さを超えると <span sdata="langKeyword" value="LONGVARCHAR"><span class="keyword">LONGVARCHAR</span></span> にマップされます。同様に、<span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> の値がその型でサポートされている長さを超えた場合、<span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> は <span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span> にマップされます。<span sdata="langKeyword" value="byte[]"><span class="keyword">byte[]</span></span> の場合も同様です。<span sdata="langKeyword" value="VARBINARY"><span class="keyword">VARBINARY</span></span> よりも長い値は、<span sdata="langKeyword" value="LONGVARBINARY"><span class="keyword">LONGVARBINARY</span></span> になります。</p><p>JDBC ドライバーの setter メソッドでサポートされている変換には、次の 2 つのカテゴリがあります。</p><ul><li><p><span class="label">データ損失なし (x)</span>: setter 型が、基になるサーバーの型と同じか、またはそれより小さい場合の数値変換です。たとえば、基になるサーバーの <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 列で <b>setBigDecimal</b> を呼び出すとき、変換は必要ありません。数値を文字に変換する場合、Java の <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> データ型は <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> に変換されます。たとえば、varchar(50) 列で "53" の値を使用して <b>setDouble</b> を呼び出すと、変換先の列に文字列値 "53" が作成されます。</p></li><li><p><span class="label">変換 (y)</span>: Java の <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 型から基になるサーバーの <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 型への変換です。これは変換前より小さくなります。この変換は通常の変換で、SQL Server の変換規則に従って行われます。有効桁数は常に切り捨てられ、四捨五入されることはありません。オーバーフローするとサポートされていない変換のエラーがスローされます。たとえば、"1.9999" の値を持つ基になる整数列に <b>updateDecimal</b> を使用すると、変換先の列は "1" になりますが、"3000000000" が渡されるとドライバーはエラーをスローします。</p></li><li><p><span class="label">データに依存 (z)</span>: Java の <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 型から基になる SQL Server データ型への変換は、次の条件に依存します。ドライバーが <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 値を SQL Server に送信し、SQL Server が必要に応じて変換を実行します。<b>sendStringParametersAsUnicode</b> が true に設定されており、なおかつ、基になる SQL Server のデータ型が <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> である場合、<span sdata="langKeyword" value="nvarchar"><span class="keyword">nvarchar</span></span> から <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> への変換が SQL Server によって許可されず、<b>SQLServerException</b> がスローされます。sendStringParametersAsUnicode が false に設定されており、なおかつ、基になる SQL Server のデータ型が <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> である場合、<span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span> から <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> への変換が SQL Server によって許可され、例外はスローされません。</p></li></ul><p>SQL Server は変換を行い、問題が発生すると JDBC ドライバーにエラーを返します。</p><p>SQL Server の列データ型が <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> の場合、データ値は有効な <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> であることが必要です。<b>updateBytes</b> メソッド、<b>updateBinaryStream</b> メソッド、または <b>updateBlob</b> メソッドを呼び出す場合、データ値は、XML 文字の 16 進形式の文字列表記である必要があります。次に例を示します。</p><div class="sampleCode"><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div><p>XML 文字に特定の文字エンコードが使用されている場合は、バイト順マーク (BOM) が必要です。</p></div><h1 class="heading">setObject での変換</h1><div id="sectionSection3" class="section" name="collapseableSection" style=""><p><a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> クラスの <b>setObject(&lt;Type&gt;)</b> メソッドに渡された、Java で型指定されたデータには、次の変換が適用されます。</p><img alt="JDBCSetObjectConversions" src="../art/JDBC_JDBCSetObjectConversions.gif" /><p>変換後の型が指定されていない <b>setObject</b> メソッドでは、既定のマッピングが使用されます。<span sdata="langKeyword" value="String"><span class="keyword">String</span></span> データ型の場合、値は <span sdata="langKeyword" value="VARCHAR"><span class="keyword">VARCHAR</span></span> の長さを超えると <span sdata="langKeyword" value="LONGVARCHAR"><span class="keyword">LONGVARCHAR</span></span> にマップされます。同様に、<span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> の値がその型でサポートされている長さを超えた場合、<span sdata="langKeyword" value="NVARCHAR"><span class="keyword">NVARCHAR</span></span> は <span sdata="langKeyword" value="LONGNVARCHAR"><span class="keyword">LONGNVARCHAR</span></span> にマップされます。<span sdata="langKeyword" value="byte[]"><span class="keyword">byte[]</span></span> の場合も同様です。<span sdata="langKeyword" value="VARBINARY"><span class="keyword">VARBINARY</span></span> よりも長い値は、<span sdata="langKeyword" value="LONGVARBINARY"><span class="keyword">LONGVARBINARY</span></span> になります。</p><p>JDBC ドライバーの setObject メソッドでサポートされている変換には、次の 3 つのカテゴリがあります。</p><ul><li><p><span class="label">データ損失なし (x)</span>: setter 型が、基になるサーバーの型と同じか、またはそれより小さい場合の数値変換です。たとえば、基になるサーバーの <span sdata="langKeyword" value="decimal"><span class="keyword">decimal</span></span> 列で <b>setBigDecimal</b> を呼び出すとき、変換は必要ありません。数値を文字に変換する場合、Java の <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> データ型は <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> に変換されます。たとえば、varchar(50) 列で "53" の値を使用して <b>setDouble</b> を呼び出すと、変換先の列に文字列値 "53" が作成されます。</p></li><li><p><span class="label">変換 (y)</span>: Java の <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 型から基になるサーバーの <span sdata="langKeyword" value="numeric"><span class="keyword">numeric</span></span> 型への変換です。これは変換前より小さくなります。この変換は通常の変換で、SQL Server の変換規則に従って行われます。有効桁数は常に切り捨てられ、四捨五入されることはありません。オーバーフローするとサポートされていない変換のエラーがスローされます。たとえば、"1.9999" の値を持つ基になる整数列に <b>updateDecimal</b> を使用すると、変換先の列は "1" になりますが、"3000000000" が渡されるとドライバーはエラーをスローします。</p></li><li><p><span class="label">データに依存 (z)</span>: Java の <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 型から基になる SQL Server データ型への変換は、次の条件に依存します。ドライバーが <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> 値を SQL Server に送信し、SQL Server が必要に応じて変換を実行します。<b>sendStringParametersAsUnicode</b> 接続プロパティが true に設定されており、なおかつ、基になる SQL Server のデータ型が <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> である場合、<span sdata="langKeyword" value="nvarchar"><span class="keyword">nvarchar</span></span> から <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> への変換が SQL Server によって許可されず、SQLServerException がスローされます。<b>sendStringParametersAsUnicode</b> が false に設定されており、なおかつ、基になる SQL Server のデータ型が <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> である場合、<span sdata="langKeyword" value="varchar"><span class="keyword">varchar</span></span> から <span sdata="langKeyword" value="image"><span class="keyword">image</span></span> への変換が SQL Server によって許可され、例外はスローされません。</p></li></ul><p>SQL Server は一括して設定の変換を行い、問題が発生すると JDBC ドライバーにエラーを返します。クライアント側で行われる変換は例外で、<span sdata="langKeyword" value="date"><span class="keyword">date</span></span>、<span sdata="langKeyword" value="time"><span class="keyword">time</span></span>、<span sdata="langKeyword" value="timestamp"><span class="keyword">timestamp</span></span>、<span sdata="langKeyword" value="Boolean"><span class="keyword">Boolean</span></span>、および <span sdata="langKeyword" value="String"><span class="keyword">String</span></span> の値の場合のみ実行されます。</p><p>SQL Server の列データ型が <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> の場合、データ値は有効な <span sdata="langKeyword" value="XML"><span class="keyword">XML</span></span> であることが必要です。setObject(byte[], SQLXML)、setObject(inputStream, SQLXML)、setObject(Blob, SQLXML) のいずれかのメソッドを呼び出す場合、データ値は、XML 文字の 16 進形式の文字列表記である必要があります。次に例を示します。</p><div class="sampleCode"><span codeLanguage="other"><pre>&lt;hello&gt;world&lt;/hello&gt; = 0x3C68656C6C6F3E776F726C643C2F68656C6C6F3E </pre></span></div><p>XML 文字に特定の文字エンコードが使用されている場合は、バイト順マーク (BOM) が必要です。</p></div><span id="seeAlsoSpan"><h1 class="heading">関連項目</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="7802328d-4d23-4775-9573-4169b127d258.htm">JDBC ドライバーのデータ型について</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">このトピックに関する<a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dフィードバックありがとうございます。開発チームは、皆様からのフィードバックに基づいてドキュメントを改善しています。フィードバックを確認中、内容の確認または解決策に関するご意見をうかがうために電子メールをお送りする場合があります。お客様の電子メール アドレスをそれ以外の目的で使用することはありません。また、確認完了後はお客様の電子メール アドレス情報を削除させていただきます。%0\Aマイクロソフトのプライバシーに関する声明の詳細については、http://privacy.microsoft.com/ja-jp/default.aspx を参照してください。%0\A%0\d','カスタマー フィードバック');">フィードバック</a>を Microsoft にお送りください。</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft.All rights reserved.</a></p></span></div></div></body></html>